{
  "include concepts": {
    "prefix": "#concepts",
    "body": [
      "#include <concepts>"
    ],
    "description": "Code snippet for #include <concepts> (C++20)"
  },
  "include coroutine": {
    "prefix": "#coroutine",
    "body": [
      "#include <coroutine>"
    ],
    "description": "Code snippet for #include <coroutine> (C++20)"
  },
  "include any": {
    "prefix": "#any",
    "body": [
      "#include <any>"
    ],
    "description": "Code snippet for #include <any> (C++17)"
  },
  "include bitset": {
    "prefix": "#bitset",
    "body": [
      "#include <bitset>"
    ],
    "description": "Code snippet for #include <bitset>"
  },
  "include chrono": {
    "prefix": "#chrono",
    "body": [
      "#include <chrono>"
    ],
    "description": "Code snippet for #include <chrono> (C++11)"
  },
  "include compare": {
    "prefix": "#compare",
    "body": [
      "#include <compare>"
    ],
    "description": "Code snippet for #include <compare> (C++20)"
  },
  "include csetjmp": {
    "prefix": "#csetjmp",
    "body": [
      "#include <csetjmp>"
    ],
    "description": "Code snippet for #include <csetjmp>"
  },
  "include csignal": {
    "prefix": "#csignal",
    "body": [
      "#include <csignal>"
    ],
    "description": "Code snippet for #include <csignal>"
  },
  "include cstdarg": {
    "prefix": "#cstdarg",
    "body": [
      "#include <cstdarg>"
    ],
    "description": "Code snippet for #include <cstdarg>"
  },
  "include cstddef": {
    "prefix": "#cstddef",
    "body": [
      "#include <cstddef>"
    ],
    "description": "Code snippet for #include <cstddef>"
  },
  "include cstdlib": {
    "prefix": "#cstdlib",
    "body": [
      "#include <cstdlib>"
    ],
    "description": "Code snippet for #include <cstdlib>"
  },
  "include ctime": {
    "prefix": "#ctime",
    "body": [
      "#include <ctime>"
    ],
    "description": "Code snippet for #include <ctime>"
  },
  "include expected": {
    "prefix": "#expected",
    "body": [
      "#include <expected>"
    ],
    "description": "Code snippet for #include <expected> (C++23)"
  },
  "include functional": {
    "prefix": "#functional",
    "body": [
      "#include <functional>"
    ],
    "description": "Code snippet for #include <functional>"
  },
  "include initializer_list": {
    "prefix": "#initializer_list",
    "body": [
      "#include <initializer_list>"
    ],
    "description": "Code snippet for #include <initializer_list> (C++11)"
  },
  "include optional": {
    "prefix": "#optional",
    "body": [
      "#include <optional>"
    ],
    "description": "Code snippet for #include <optional> (C++17)"
  },
  "include source_location": {
    "prefix": "#source_location",
    "body": [
      "#include <source_location>"
    ],
    "description": "Code snippet for #include <source_location> (C++20)"
  },
  "include tuple": {
    "prefix": "#tuple",
    "body": [
      "#include <tuple>"
    ],
    "description": "Code snippet for #include <tuple> (C++11)"
  },
  "include type_traits": {
    "prefix": "#type_traits",
    "body": [
      "#include <type_traits>"
    ],
    "description": "Code snippet for #include <type_traits> (C++11)"
  },
  "include typeindex": {
    "prefix": "#typeindex",
    "body": [
      "#include <typeindex>"
    ],
    "description": "Code snippet for #include <typeindex> (C++11)"
  },
  "include typeinfo": {
    "prefix": "#typeinfo",
    "body": [
      "#include <typeinfo>"
    ],
    "description": "Code snippet for #include <typeinfo>"
  },
  "include utility": {
    "prefix": "#utility",
    "body": [
      "#include <utility>"
    ],
    "description": "Code snippet for #include <utility>"
  },
  "include variant": {
    "prefix": "#variant",
    "body": [
      "#include <variant>"
    ],
    "description": "Code snippet for #include <variant> (C++17)"
  },
  "include version": {
    "prefix": "#version",
    "body": [
      "#include <version>"
    ],
    "description": "Code snippet for #include <version> (C++20)"
  },
  "include memory": {
    "prefix": "#memory",
    "body": [
      "#include <memory>"
    ],
    "description": "Code snippet for #include <memory>"
  },
  "include memory_resource": {
    "prefix": "#memory_resource",
    "body": [
      "#include <memory_resource>"
    ],
    "description": "Code snippet for #include <memory_resource> (C++17)"
  },
  "include new": {
    "prefix": "#new",
    "body": [
      "#include <new>"
    ],
    "description": "Code snippet for #include <new>"
  },
  "include scoped_allocator": {
    "prefix": "#scoped_allocator",
    "body": [
      "#include <scoped_allocator>"
    ],
    "description": "Code snippet for #include <scoped_allocator> (C++11)"
  },
  "include cfloat": {
    "prefix": "#cfloat",
    "body": [
      "#include <cfloat>"
    ],
    "description": "Code snippet for #include <cfloat>"
  },
  "include cinttypes": {
    "prefix": "#cinttypes",
    "body": [
      "#include <cinttypes>"
    ],
    "description": "Code snippet for #include <cinttypes> (C++11)"
  },
  "include climits": {
    "prefix": "#climits",
    "body": [
      "#include <climits>"
    ],
    "description": "Code snippet for #include <climits>"
  },
  "include cstdint": {
    "prefix": "#cstdint",
    "body": [
      "#include <cstdint>"
    ],
    "description": "Code snippet for #include <cstdint> (C++11)"
  },
  "include limits": {
    "prefix": "#limits",
    "body": [
      "#include <limits>"
    ],
    "description": "Code snippet for #include <limits>"
  },
  "include stdfloat": {
    "prefix": "#stdfloat",
    "body": [
      "#include <stdfloat>"
    ],
    "description": "Code snippet for #include <stdfloat> (C++23)"
  },
  "include cassert": {
    "prefix": "#cassert",
    "body": [
      "#include <cassert>"
    ],
    "description": "Code snippet for #include <cassert>"
  },
  "include cerrno": {
    "prefix": "#cerrno",
    "body": [
      "#include <cerrno>"
    ],
    "description": "Code snippet for #include <cerrno>"
  },
  "include exception": {
    "prefix": "#exception",
    "body": [
      "#include <exception>"
    ],
    "description": "Code snippet for #include <exception>"
  },
  "include stacktrace": {
    "prefix": "#stacktrace",
    "body": [
      "#include <stacktrace>"
    ],
    "description": "Code snippet for #include <stacktrace> (C++23)"
  },
  "include stdexcept": {
    "prefix": "#stdexcept",
    "body": [
      "#include <stdexcept>"
    ],
    "description": "Code snippet for #include <stdexcept>"
  },
  "include system_error": {
    "prefix": "#system_error",
    "body": [
      "#include <system_error>"
    ],
    "description": "Code snippet for #include <system_error> (C++11)"
  },
  "include cctype": {
    "prefix": "#cctype",
    "body": [
      "#include <cctype>"
    ],
    "description": "Code snippet for #include <cctype>"
  },
  "include charconv": {
    "prefix": "#charconv",
    "body": [
      "#include <charconv>"
    ],
    "description": "Code snippet for #include <charconv> (C++17)"
  },
  "include cstring": {
    "prefix": "#cstring",
    "body": [
      "#include <cstring>"
    ],
    "description": "Code snippet for #include <cstring>"
  },
  "include cuchar": {
    "prefix": "#cuchar",
    "body": [
      "#include <cuchar>"
    ],
    "description": "Code snippet for #include <cuchar> (C++11)"
  },
  "include cwchar": {
    "prefix": "#cwchar",
    "body": [
      "#include <cwchar>"
    ],
    "description": "Code snippet for #include <cwchar>"
  },
  "include cwctype": {
    "prefix": "#cwctype",
    "body": [
      "#include <cwctype>"
    ],
    "description": "Code snippet for #include <cwctype>"
  },
  "include format": {
    "prefix": "#format",
    "body": [
      "#include <format>"
    ],
    "description": "Code snippet for #include <format> (C++20)"
  },
  "include string": {
    "prefix": "#string",
    "body": [
      "#include <string>"
    ],
    "description": "Code snippet for #include <string>"
  },
  "include string_view": {
    "prefix": "#string_view",
    "body": [
      "#include <string_view>"
    ],
    "description": "Code snippet for #include <string_view> (C++17)"
  },
  "include array": {
    "prefix": "#array",
    "body": [
      "#include <array>"
    ],
    "description": "Code snippet for #include <array> (C++11)"
  },
  "include deque": {
    "prefix": "#deque",
    "body": [
      "#include <deque>"
    ],
    "description": "Code snippet for #include <deque>"
  },
  "include flat_map": {
    "prefix": "#flat_map",
    "body": [
      "#include <flat_map>"
    ],
    "description": "Code snippet for #include <flat_map> (C++23)"
  },
  "include flat_set": {
    "prefix": "#flat_set",
    "body": [
      "#include <flat_set>"
    ],
    "description": "Code snippet for #include <flat_set> (C++23)"
  },
  "include forward_list": {
    "prefix": "#forward_list",
    "body": [
      "#include <forward_list>"
    ],
    "description": "Code snippet for #include <forward_list> (C++11)"
  },
  "include list": {
    "prefix": "#list",
    "body": [
      "#include <list>"
    ],
    "description": "Code snippet for #include <list>"
  },
  "include map": {
    "prefix": "#map",
    "body": [
      "#include <map>"
    ],
    "description": "Code snippet for #include <map>"
  },
  "include mdspan": {
    "prefix": "#mdspan",
    "body": [
      "#include <mdspan>"
    ],
    "description": "Code snippet for #include <mdspan> (C++23)"
  },
  "include queue": {
    "prefix": "#queue",
    "body": [
      "#include <queue>"
    ],
    "description": "Code snippet for #include <queue>"
  },
  "include set": {
    "prefix": "#set",
    "body": [
      "#include <set>"
    ],
    "description": "Code snippet for #include <set>"
  },
  "include span": {
    "prefix": "#span",
    "body": [
      "#include <span>"
    ],
    "description": "Code snippet for #include <span> (C++20)"
  },
  "include stack": {
    "prefix": "#stack",
    "body": [
      "#include <stack>"
    ],
    "description": "Code snippet for #include <stack>"
  },
  "include unordered_map": {
    "prefix": "#unordered_map",
    "body": [
      "#include <unordered_map>"
    ],
    "description": "Code snippet for #include <unordered_map> (C++11)"
  },
  "include unordered_set": {
    "prefix": "#unordered_set",
    "body": [
      "#include <unordered_set>"
    ],
    "description": "Code snippet for #include <unordered_set> (C++11)"
  },
  "include vector": {
    "prefix": "#vector",
    "body": [
      "#include <vector>"
    ],
    "description": "Code snippet for #include <vector>"
  },
  "include iterator": {
    "prefix": "#iterator",
    "body": [
      "#include <iterator>"
    ],
    "description": "Code snippet for #include <iterator>"
  },
  "include generator": {
    "prefix": "#generator",
    "body": [
      "#include <generator>"
    ],
    "description": "Code snippet for #include <generator> (C++23)"
  },
  "include ranges": {
    "prefix": "#ranges",
    "body": [
      "#include <ranges>"
    ],
    "description": "Code snippet for #include <ranges> (C++20)"
  },
  "include algorithm": {
    "prefix": "#algorithm",
    "body": [
      "#include <algorithm>"
    ],
    "description": "Code snippet for #include <algorithm>"
  },
  "include execution": {
    "prefix": "#execution",
    "body": [
      "#include <execution>"
    ],
    "description": "Code snippet for #include <execution> (C++17)"
  },
  "include bit": {
    "prefix": "#bit",
    "body": [
      "#include <bit>"
    ],
    "description": "Code snippet for #include <bit> (C++20)"
  },
  "include cfenv": {
    "prefix": "#cfenv",
    "body": [
      "#include <cfenv>"
    ],
    "description": "Code snippet for #include <cfenv> (C++11)"
  },
  "include cmath": {
    "prefix": "#cmath",
    "body": [
      "#include <cmath>"
    ],
    "description": "Code snippet for #include <cmath>"
  },
  "include complex": {
    "prefix": "#complex",
    "body": [
      "#include <complex>"
    ],
    "description": "Code snippet for #include <complex>"
  },
  "include numbers": {
    "prefix": "#numbers",
    "body": [
      "#include <numbers>"
    ],
    "description": "Code snippet for #include <numbers> (C++20)"
  },
  "include numeric": {
    "prefix": "#numeric",
    "body": [
      "#include <numeric>"
    ],
    "description": "Code snippet for #include <numeric>"
  },
  "include random": {
    "prefix": "#random",
    "body": [
      "#include <random>"
    ],
    "description": "Code snippet for #include <random> (C++11)"
  },
  "include ratio": {
    "prefix": "#ratio",
    "body": [
      "#include <ratio>"
    ],
    "description": "Code snippet for #include <ratio> (C++11)"
  },
  "include valarray": {
    "prefix": "#valarray",
    "body": [
      "#include <valarray>"
    ],
    "description": "Code snippet for #include <valarray>"
  },
  "include clocale": {
    "prefix": "#clocale",
    "body": [
      "#include <clocale>"
    ],
    "description": "Code snippet for #include <clocale>"
  },
  "include codecvt": {
    "prefix": "#codecvt",
    "body": [
      "#include <codecvt>"
    ],
    "description": "Code snippet for #include <codecvt> (C++11, deprecated in C++17)"
  },
  "include locale": {
    "prefix": "#locale",
    "body": [
      "#include <locale>"
    ],
    "description": "Code snippet for #include <locale>"
  },
  "include cstdio": {
    "prefix": "#cstdio",
    "body": [
      "#include <cstdio>"
    ],
    "description": "Code snippet for #include <cstdio>"
  },
  "include fstream": {
    "prefix": "#fstream",
    "body": [
      "#include <fstream>"
    ],
    "description": "Code snippet for #include <fstream>"
  },
  "include iomanip": {
    "prefix": "#iomanip",
    "body": [
      "#include <iomanip>"
    ],
    "description": "Code snippet for #include <iomanip>"
  },
  "include ios": {
    "prefix": "#ios",
    "body": [
      "#include <ios>"
    ],
    "description": "Code snippet for #include <ios>"
  },
  "include iosfwd": {
    "prefix": "#iosfwd",
    "body": [
      "#include <iosfwd>"
    ],
    "description": "Code snippet for #include <iosfwd>"
  },
  "include iostream": {
    "prefix": "#iostream",
    "body": [
      "#include <iostream>"
    ],
    "description": "Code snippet for #include <iostream>"
  },
  "include istream": {
    "prefix": "#istream",
    "body": [
      "#include <istream>"
    ],
    "description": "Code snippet for #include <istream>"
  },
  "include ostream": {
    "prefix": "#ostream",
    "body": [
      "#include <ostream>"
    ],
    "description": "Code snippet for #include <ostream>"
  },
  "include print": {
    "prefix": "#print",
    "body": [
      "#include <print>"
    ],
    "description": "Code snippet for #include <print> (C++23)"
  },
  "include spanstream": {
    "prefix": "#spanstream",
    "body": [
      "#include <spanstream>"
    ],
    "description": "Code snippet for #include <spanstream> (C++23)"
  },
  "include sstream": {
    "prefix": "#sstream",
    "body": [
      "#include <sstream>"
    ],
    "description": "Code snippet for #include <sstream>"
  },
  "include streambuf": {
    "prefix": "#streambuf",
    "body": [
      "#include <streambuf>"
    ],
    "description": "Code snippet for #include <streambuf>"
  },
  "include strstream": {
    "prefix": "#strstream",
    "body": [
      "#include <strstream>"
    ],
    "description": "Code snippet for #include <strstream> (deprecated in C++98)"
  },
  "include syncstream": {
    "prefix": "#syncstream",
    "body": [
      "#include <syncstream>"
    ],
    "description": "Code snippet for #include <syncstream> (C++20)"
  },
  "include filesystem": {
    "prefix": "#filesystem",
    "body": [
      "#include <filesystem>"
    ],
    "description": "Code snippet for #include <filesystem> (C++17)"
  },
  "include regex": {
    "prefix": "#regex",
    "body": [
      "#include <regex>"
    ],
    "description": "Code snippet for #include <regex> (C++11)"
  },
  "include atomic": {
    "prefix": "#atomic",
    "body": [
      "#include <atomic>"
    ],
    "description": "Code snippet for #include <atomic> (C++11)"
  },
  "include barrier": {
    "prefix": "#barrier",
    "body": [
      "#include <barrier>"
    ],
    "description": "Code snippet for #include <barrier> (C++20)"
  },
  "include condition_variable": {
    "prefix": "#condition_variable",
    "body": [
      "#include <condition_variable>"
    ],
    "description": "Code snippet for #include <condition_variable> (C++11)"
  },
  "include future": {
    "prefix": "#future",
    "body": [
      "#include <future>"
    ],
    "description": "Code snippet for #include <future> (C++11)"
  },
  "include latch": {
    "prefix": "#latch",
    "body": [
      "#include <latch>"
    ],
    "description": "Code snippet for #include <latch> (C++20)"
  },
  "include mutex": {
    "prefix": "#mutex",
    "body": [
      "#include <mutex>"
    ],
    "description": "Code snippet for #include <mutex> (C++11)"
  },
  "include semaphore": {
    "prefix": "#semaphore",
    "body": [
      "#include <semaphore>"
    ],
    "description": "Code snippet for #include <semaphore> (C++20)"
  },
  "include shared_mutex": {
    "prefix": "#shared_mutex",
    "body": [
      "#include <shared_mutex>"
    ],
    "description": "Code snippet for #include <shared_mutex> (C++14)"
  },
  "include stop_token": {
    "prefix": "#stop_token",
    "body": [
      "#include <stop_token>"
    ],
    "description": "Code snippet for #include <stop_token> (C++20)"
  },
  "include thread": {
    "prefix": "#thread",
    "body": [
      "#include <thread>"
    ],
    "description": "Code snippet for #include <thread> (C++11)"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\t${2:/* data */}\npublic:\n\t${1}(${3:/* args */});\n\t~${1}();\n};\n\n${1}::${1}(${3})\n{\n}\n\n${1}::~${1}()\n{\n}",
    "description": "Code snippet for class",
  },
  "class with inlined constructor/destructor": {
    "prefix": "classi",
    "body": "class ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\t${2:/* data */}\npublic:\n\t${1}(${3:/* args */}) { $0}\n\t~${1}() { }\n};",
    "description": "Code snippet for class with inlined constructor/destructor",
  },
  "class template": {
    "prefix": "classt",
    "body": "template<typename T>\nclass ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\tT ${2:/* data */}\npublic:\n\t${1}(T ${3:/* args */});\n};",
    "description": "Code snippet for class template",
  },
  "namespace": {
    "prefix": "namesp",
    "body": "namespace ${1:name}\n{\n\t$0\n} // $1",
    "description": "Code snippet for namespace",
  },
  "try": {
    "prefix": "try",
    "body": "try\n{\n\t${1:/* code */}\n}\ncatch(${2:const std::exception& e})\n{\n\t${0:std::cerr << e.what() << '\\n';}\n}",
    "description": "Code snippet for try catch block",
  },
  "Type alias": {
    "prefix": ["us=", "type-alias"],
    "body": "using ${1:identifier} = ${2:type-id};",
    "description": "Code snippet for type alias",
  },
  "Namespace alias": {
    "prefix": ["ns=", "namespace-alias"],
    "body": "namespace ${1:identifier} = ${2:ns_name};",
    "description": "Code snippet for namespace alias",
  },
  "Alias template": {
    "prefix": ["tus=", "templus"],
    "body": "template <${1:template-parameter-list}>\nusing ${2:identifier} = ${3:type-id};",
    "description": "Code snippet for alias template",
  },
  "Using-directive": {
    "prefix": ["usns", "usnamesp"],
    "body": "using namespace ${1:namespace-name};",
    "description": "Code snippet for using-directives",
  },
  "const_cast": {
    "prefix": "c_cast",
    "body": "const_cast<${1:type}>(${TM_SELECTED_TEXT}$0)",
    "description": "Code snippet for `const_cast`"
  },
  "dynamic_cast": {
    "prefix": "d_cast",
    "body": "dynamic_cast<${1:type}>(${TM_SELECTED_TEXT}$0)",
    "description": "Code snippet for `dynamic_cast`"
  },
  "reinterpret_cast": {
    "prefix": "r_cast",
    "body": "reinterpret_cast<${1:type}>(${TM_SELECTED_TEXT}$0)",
    "description": "Code snippet for `reinterpret_cast`"
  },
  "static_cast": {
    "prefix": "s_cast",
    "body": "static_cast<${1:type}>(${TM_SELECTED_TEXT}$0)",
    "description": "Code snippet for `static_cast`"
  },
}