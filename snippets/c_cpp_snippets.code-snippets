{
  "struct": {
    "prefix": "struct",
    "body": "struct ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};\n",
    "description": "Code snippet for struct",
  },
  "union": {
    "prefix": "union",
    "body": "union ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};\n",
    "description": "Code snippet for union",
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:/* condition */}) {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if()",
  },
  "ifel": {
    "prefix": "ifel",
    "body": "if (${1:/* condition */}) {\n\t${2:/* code */}\n} else {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if() else",
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": "if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if(${3:/* condition */}) {\n\t${4:/* code */}\n} else {\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for if() else if() else",
  },
  "else": {
    "prefix": "else",
    "body": "else\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for else",
  },
  "elif": {
    "prefix": "elif",
    "body": "else if (${1:/* condition */})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for else if ()",
  },
  "switch": {
    "prefix": "switch",
    "body": "switch (${1:expression})\n{\n\tcase ${2:/* constant-expression */}:\n\t\t${3:/* code */}\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n}",
    "description": "Code snippet for switch",
  },
  "main": {
    "prefix": "main",
    "body": "int main(int argc, char const *argv[])\n{\n\t${1:/* code */}\n\treturn 0;\n}\n",
    "description": "Code snippet for main()",
  },
  "do": {
    "prefix": "do_",
    "body": "do\n{\n\t${0:/* code */}\n} while (${1:/* condition */});\n",
    "description": "Code snippet for do while loop",
  },
  "for": {
    "prefix": "for",
    "body": "for(${1:size_t} ${2:i} = 0; $2 < ${3:count}; ${4:++$2})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for for loop",
  },
  "forr": {
    "prefix": "forr",
    "body": "for(int ${1:i} = ${2:length} - 1; $1 >= 0; ${3:--$1})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for reverse for loop",
  },
  "foreach": {
    "prefix": "foreach",
    "body": "for(${1:object} = ${2:var} in ${3:collection})\n{\n\t${0:/* code */}\n}\n",
    "description": "Code snippet for foreach loop",
  },
  "forrange": {
    "prefix": "forrange",
    "body": "for(auto&& ${1:i} : ${2:v})\n{\n\t$0\n}\n",
    "description": "Code snippet for range-based forloop",
  },
  "while": {
    "prefix": "while",
    "body": "while(${1:/* condition */}){\n\t${2:/* code */}\n}\n",
    "description": "Code snippet for while loop",
  },
  "ifd": {
    "prefix": "ifnd",
    "body": "#if defined($1)\n\n${0}\n\n#endif // $1\n",
    "description": "Code snippet for if defined()",
  },
  "ifnd": {
    "prefix": "ifnd",
    "body": "#if !defined($1)\n#define ${1:MACRO}\n\n${0}\n\n#endif // $1\n",
    "description": "Code snippet for if !defined()",
  },
  "#pragma_pack": {
    "prefix": "pack",
    "body": [
      "#pragma pack(push, ${1:1})\n${TM_SELECTED_TEXT}$0\n#pragma pack(pop)"
    ],
    "description": "Packing alignment for structure, union, and class members"
  },
  "deprecated code": {
    "prefix": "deprecated",
    "body": [
      "#if ${1:DEPRECATED}\n${TM_SELECTED_TEXT}$0\n#endif // $1"
    ],
    "description": "Mark code as DEPRECATED"
  },
  "deprecated code with #else": {
    "prefix": "deprecated-else",
    "body": [
      "#if ${1:DEPRECATED}\n${TM_SELECTED_TEXT}\n#else // $1\n$0\n#endif // $1"
    ],
    "description": "Mark code as DEPRECATED with #else block"
  },
  "supress clang-format": {
    "prefix": "clang-off",
    "body": [
      "// clang-format off\n${TM_SELECTED_TEXT}$0\n// clang-format on"
    ],
    "description": "Disable code formatting (clang-format)"
  },
  "region/endregion": {
    "prefix": "reg",
    "body": [
      "#pragma region \"${1:Description}\"\n${TM_SELECTED_TEXT}$0\n#pragma endregion"
    ],
    "description": "Code snippet for #pragma region/endregion"
  },
}